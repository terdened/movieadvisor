//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace movieAdvisor
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class MOVIEADVISOREntities2 : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект MOVIEADVISOREntities2, используя строку соединения из раздела "MOVIEADVISOREntities2" файла конфигурации приложения.
        /// </summary>
        public MOVIEADVISOREntities2() : base("name=MOVIEADVISOREntities2", "MOVIEADVISOREntities2")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта MOVIEADVISOREntities2.
        /// </summary>
        public MOVIEADVISOREntities2(string connectionString) : base(connectionString, "MOVIEADVISOREntities2")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта MOVIEADVISOREntities2.
        /// </summary>
        public MOVIEADVISOREntities2(EntityConnection connection) : base(connection, "MOVIEADVISOREntities2")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<MOVIES> MOVIES
        {
            get
            {
                if ((_MOVIES == null))
                {
                    _MOVIES = base.CreateObjectSet<MOVIES>("MOVIES");
                }
                return _MOVIES;
            }
        }
        private ObjectSet<MOVIES> _MOVIES;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PERSONS> PERSONS
        {
            get
            {
                if ((_PERSONS == null))
                {
                    _PERSONS = base.CreateObjectSet<PERSONS>("PERSONS");
                }
                return _PERSONS;
            }
        }
        private ObjectSet<PERSONS> _PERSONS;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<USERS> USERS
        {
            get
            {
                if ((_USERS == null))
                {
                    _USERS = base.CreateObjectSet<USERS>("USERS");
                }
                return _USERS;
            }
        }
        private ObjectSet<USERS> _USERS;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet MOVIES. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToMOVIES(MOVIES mOVIES)
        {
            base.AddObject("MOVIES", mOVIES);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PERSONS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPERSONS(PERSONS pERSONS)
        {
            base.AddObject("PERSONS", pERSONS);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet USERS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUSERS(USERS uSERS)
        {
            base.AddObject("USERS", uSERS);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="MOVIES")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MOVIES : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта MOVIES.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="tITLE">Исходное значение свойства TITLE.</param>
        public static MOVIES CreateMOVIES(global::System.Int32 id, global::System.String tITLE)
        {
            MOVIES mOVIES = new MOVIES();
            mOVIES.ID = id;
            mOVIES.TITLE = tITLE;
            return mOVIES;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TITLE
        {
            get
            {
                return _TITLE;
            }
            set
            {
                OnTITLEChanging(value);
                ReportPropertyChanging("TITLE");
                _TITLE = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TITLE");
                OnTITLEChanged();
            }
        }
        private global::System.String _TITLE;
        partial void OnTITLEChanging(global::System.String value);
        partial void OnTITLEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DESCRIPTION
        {
            get
            {
                return _DESCRIPTION;
            }
            set
            {
                OnDESCRIPTIONChanging(value);
                ReportPropertyChanging("DESCRIPTION");
                _DESCRIPTION = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DESCRIPTION");
                OnDESCRIPTIONChanged();
            }
        }
        private global::System.String _DESCRIPTION;
        partial void OnDESCRIPTIONChanging(global::System.String value);
        partial void OnDESCRIPTIONChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> YEAR
        {
            get
            {
                return _YEAR;
            }
            set
            {
                OnYEARChanging(value);
                ReportPropertyChanging("YEAR");
                _YEAR = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("YEAR");
                OnYEARChanged();
            }
        }
        private Nullable<global::System.Int32> _YEAR;
        partial void OnYEARChanging(Nullable<global::System.Int32> value);
        partial void OnYEARChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="PERSONS")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PERSONS : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PERSONS.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="nAME">Исходное значение свойства NAME.</param>
        public static PERSONS CreatePERSONS(global::System.Int32 id, global::System.String nAME)
        {
            PERSONS pERSONS = new PERSONS();
            pERSONS.ID = id;
            pERSONS.NAME = nAME;
            return pERSONS;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                OnNAMEChanging(value);
                ReportPropertyChanging("NAME");
                _NAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NAME");
                OnNAMEChanged();
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DESCRIPTION
        {
            get
            {
                return _DESCRIPTION;
            }
            set
            {
                OnDESCRIPTIONChanging(value);
                ReportPropertyChanging("DESCRIPTION");
                _DESCRIPTION = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DESCRIPTION");
                OnDESCRIPTIONChanged();
            }
        }
        private global::System.String _DESCRIPTION;
        partial void OnDESCRIPTIONChanging(global::System.String value);
        partial void OnDESCRIPTIONChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="USERS")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class USERS : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта USERS.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="uSERNAME">Исходное значение свойства USERNAME.</param>
        /// <param name="pASSWORD">Исходное значение свойства PASSWORD.</param>
        /// <param name="rOLES">Исходное значение свойства ROLES.</param>
        public static USERS CreateUSERS(global::System.Int32 id, global::System.String uSERNAME, global::System.String pASSWORD, global::System.String rOLES)
        {
            USERS uSERS = new USERS();
            uSERS.ID = id;
            uSERS.USERNAME = uSERNAME;
            uSERS.PASSWORD = pASSWORD;
            uSERS.ROLES = rOLES;
            return uSERS;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String USERNAME
        {
            get
            {
                return _USERNAME;
            }
            set
            {
                OnUSERNAMEChanging(value);
                ReportPropertyChanging("USERNAME");
                _USERNAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("USERNAME");
                OnUSERNAMEChanged();
            }
        }
        private global::System.String _USERNAME;
        partial void OnUSERNAMEChanging(global::System.String value);
        partial void OnUSERNAMEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PASSWORD
        {
            get
            {
                return _PASSWORD;
            }
            set
            {
                OnPASSWORDChanging(value);
                ReportPropertyChanging("PASSWORD");
                _PASSWORD = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PASSWORD");
                OnPASSWORDChanged();
            }
        }
        private global::System.String _PASSWORD;
        partial void OnPASSWORDChanging(global::System.String value);
        partial void OnPASSWORDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ROLES
        {
            get
            {
                return _ROLES;
            }
            set
            {
                OnROLESChanging(value);
                ReportPropertyChanging("ROLES");
                _ROLES = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ROLES");
                OnROLESChanged();
            }
        }
        private global::System.String _ROLES;
        partial void OnROLESChanging(global::System.String value);
        partial void OnROLESChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EMAIL
        {
            get
            {
                return _EMAIL;
            }
            set
            {
                OnEMAILChanging(value);
                ReportPropertyChanging("EMAIL");
                _EMAIL = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EMAIL");
                OnEMAILChanged();
            }
        }
        private global::System.String _EMAIL;
        partial void OnEMAILChanging(global::System.String value);
        partial void OnEMAILChanged();

        #endregion

    
    }

    #endregion

    
}
