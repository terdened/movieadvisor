//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_MOVIES_COMMENTS_MOVIES", "MOVIES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.MOVIES), "MOVIES_COMMENTS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.MOVIES_COMMENTS), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_MOVIES_PERSONS_ROLES_MOVIES", "MOVIES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.MOVIES), "MOVIES_PERSONS_ROLES", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.MOVIES_PERSONS_ROLES), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_PICTURES_MOVIES_MOVIES", "MOVIES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.MOVIES), "PICTURES_MOVIES", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.PICTURES_MOVIES), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_MOVIES_COMMENTS_MOVIES_COMMENTS", "MOVIES_COMMENTS", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(movieAdvisor.MOVIES_COMMENTS), "MOVIES_COMMENTS1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.MOVIES_COMMENTS), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_MOVIES_COMMENTS_USERS", "USERS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.USERS), "MOVIES_COMMENTS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.MOVIES_COMMENTS), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_MOVIES_PERSONS_ROLES_PERSONS", "PERSONS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.PERSONS), "MOVIES_PERSONS_ROLES", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.MOVIES_PERSONS_ROLES), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_MOVIES_PERSONS_ROLES_ROLES", "ROLES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.ROLES), "MOVIES_PERSONS_ROLES", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.MOVIES_PERSONS_ROLES), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_PERSONS_COMMENTS_PERSONS", "PERSONS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.PERSONS), "PERSONS_COMMENTS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.PERSONS_COMMENTS), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_PICTURES_PERSONS_PERSONS", "PERSONS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.PERSONS), "PICTURES_PERSONS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.PICTURES_PERSONS), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_PERSONS_COMMENTS_PERSONS_COMMENTS", "PERSONS_COMMENTS", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(movieAdvisor.PERSONS_COMMENTS), "PERSONS_COMMENTS1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.PERSONS_COMMENTS), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_PERSONS_COMMENTS_USERS", "USERS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.USERS), "PERSONS_COMMENTS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.PERSONS_COMMENTS), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_PICTURES_MOVIES_PICTURES", "PICTURES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.PICTURES), "PICTURES_MOVIES", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.PICTURES_MOVIES), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_PICTURES_PERSONS_PICTURES", "PICTURES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.PICTURES), "PICTURES_PERSONS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.PICTURES_PERSONS), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_MOVIES_GENRES_GENRES", "GENRES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.GENRES), "MOVIES_GENRES", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.MOVIES_GENRES), true)]
[assembly: EdmRelationshipAttribute("MOVIEADVISORModel", "FK_MOVIES_GENRES_MOVIES", "MOVIES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(movieAdvisor.MOVIES), "MOVIES_GENRES", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(movieAdvisor.MOVIES_GENRES), true)]

#endregion

namespace movieAdvisor
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class MOVIEADVISOREntities6 : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект MOVIEADVISOREntities6, используя строку соединения из раздела "MOVIEADVISOREntities6" файла конфигурации приложения.
        /// </summary>
        public MOVIEADVISOREntities6() : base("name=MOVIEADVISOREntities6", "MOVIEADVISOREntities6")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта MOVIEADVISOREntities6.
        /// </summary>
        public MOVIEADVISOREntities6(string connectionString) : base(connectionString, "MOVIEADVISOREntities6")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта MOVIEADVISOREntities6.
        /// </summary>
        public MOVIEADVISOREntities6(EntityConnection connection) : base(connection, "MOVIEADVISOREntities6")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<GENRES> GENRES
        {
            get
            {
                if ((_GENRES == null))
                {
                    _GENRES = base.CreateObjectSet<GENRES>("GENRES");
                }
                return _GENRES;
            }
        }
        private ObjectSet<GENRES> _GENRES;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<MOVIES> MOVIES
        {
            get
            {
                if ((_MOVIES == null))
                {
                    _MOVIES = base.CreateObjectSet<MOVIES>("MOVIES");
                }
                return _MOVIES;
            }
        }
        private ObjectSet<MOVIES> _MOVIES;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<MOVIES_COMMENTS> MOVIES_COMMENTS
        {
            get
            {
                if ((_MOVIES_COMMENTS == null))
                {
                    _MOVIES_COMMENTS = base.CreateObjectSet<MOVIES_COMMENTS>("MOVIES_COMMENTS");
                }
                return _MOVIES_COMMENTS;
            }
        }
        private ObjectSet<MOVIES_COMMENTS> _MOVIES_COMMENTS;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<MOVIES_PERSONS_ROLES> MOVIES_PERSONS_ROLES
        {
            get
            {
                if ((_MOVIES_PERSONS_ROLES == null))
                {
                    _MOVIES_PERSONS_ROLES = base.CreateObjectSet<MOVIES_PERSONS_ROLES>("MOVIES_PERSONS_ROLES");
                }
                return _MOVIES_PERSONS_ROLES;
            }
        }
        private ObjectSet<MOVIES_PERSONS_ROLES> _MOVIES_PERSONS_ROLES;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PERSONS> PERSONS
        {
            get
            {
                if ((_PERSONS == null))
                {
                    _PERSONS = base.CreateObjectSet<PERSONS>("PERSONS");
                }
                return _PERSONS;
            }
        }
        private ObjectSet<PERSONS> _PERSONS;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PERSONS_COMMENTS> PERSONS_COMMENTS
        {
            get
            {
                if ((_PERSONS_COMMENTS == null))
                {
                    _PERSONS_COMMENTS = base.CreateObjectSet<PERSONS_COMMENTS>("PERSONS_COMMENTS");
                }
                return _PERSONS_COMMENTS;
            }
        }
        private ObjectSet<PERSONS_COMMENTS> _PERSONS_COMMENTS;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PICTURES> PICTURES
        {
            get
            {
                if ((_PICTURES == null))
                {
                    _PICTURES = base.CreateObjectSet<PICTURES>("PICTURES");
                }
                return _PICTURES;
            }
        }
        private ObjectSet<PICTURES> _PICTURES;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PICTURES_MOVIES> PICTURES_MOVIES
        {
            get
            {
                if ((_PICTURES_MOVIES == null))
                {
                    _PICTURES_MOVIES = base.CreateObjectSet<PICTURES_MOVIES>("PICTURES_MOVIES");
                }
                return _PICTURES_MOVIES;
            }
        }
        private ObjectSet<PICTURES_MOVIES> _PICTURES_MOVIES;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PICTURES_PERSONS> PICTURES_PERSONS
        {
            get
            {
                if ((_PICTURES_PERSONS == null))
                {
                    _PICTURES_PERSONS = base.CreateObjectSet<PICTURES_PERSONS>("PICTURES_PERSONS");
                }
                return _PICTURES_PERSONS;
            }
        }
        private ObjectSet<PICTURES_PERSONS> _PICTURES_PERSONS;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ROLES> ROLES
        {
            get
            {
                if ((_ROLES == null))
                {
                    _ROLES = base.CreateObjectSet<ROLES>("ROLES");
                }
                return _ROLES;
            }
        }
        private ObjectSet<ROLES> _ROLES;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<USERS> USERS
        {
            get
            {
                if ((_USERS == null))
                {
                    _USERS = base.CreateObjectSet<USERS>("USERS");
                }
                return _USERS;
            }
        }
        private ObjectSet<USERS> _USERS;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<MOVIES_GENRES> MOVIES_GENRES
        {
            get
            {
                if ((_MOVIES_GENRES == null))
                {
                    _MOVIES_GENRES = base.CreateObjectSet<MOVIES_GENRES>("MOVIES_GENRES");
                }
                return _MOVIES_GENRES;
            }
        }
        private ObjectSet<MOVIES_GENRES> _MOVIES_GENRES;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet GENRES. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToGENRES(GENRES gENRES)
        {
            base.AddObject("GENRES", gENRES);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet MOVIES. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToMOVIES(MOVIES mOVIES)
        {
            base.AddObject("MOVIES", mOVIES);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet MOVIES_COMMENTS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToMOVIES_COMMENTS(MOVIES_COMMENTS mOVIES_COMMENTS)
        {
            base.AddObject("MOVIES_COMMENTS", mOVIES_COMMENTS);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet MOVIES_PERSONS_ROLES. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToMOVIES_PERSONS_ROLES(MOVIES_PERSONS_ROLES mOVIES_PERSONS_ROLES)
        {
            base.AddObject("MOVIES_PERSONS_ROLES", mOVIES_PERSONS_ROLES);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PERSONS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPERSONS(PERSONS pERSONS)
        {
            base.AddObject("PERSONS", pERSONS);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PERSONS_COMMENTS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPERSONS_COMMENTS(PERSONS_COMMENTS pERSONS_COMMENTS)
        {
            base.AddObject("PERSONS_COMMENTS", pERSONS_COMMENTS);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PICTURES. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPICTURES(PICTURES pICTURES)
        {
            base.AddObject("PICTURES", pICTURES);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PICTURES_MOVIES. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPICTURES_MOVIES(PICTURES_MOVIES pICTURES_MOVIES)
        {
            base.AddObject("PICTURES_MOVIES", pICTURES_MOVIES);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PICTURES_PERSONS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPICTURES_PERSONS(PICTURES_PERSONS pICTURES_PERSONS)
        {
            base.AddObject("PICTURES_PERSONS", pICTURES_PERSONS);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ROLES. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToROLES(ROLES rOLES)
        {
            base.AddObject("ROLES", rOLES);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet USERS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUSERS(USERS uSERS)
        {
            base.AddObject("USERS", uSERS);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet MOVIES_GENRES. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToMOVIES_GENRES(MOVIES_GENRES mOVIES_GENRES)
        {
            base.AddObject("MOVIES_GENRES", mOVIES_GENRES);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="GENRES")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GENRES : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта GENRES.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="tITLE">Исходное значение свойства TITLE.</param>
        public static GENRES CreateGENRES(global::System.Int32 id, global::System.String tITLE)
        {
            GENRES gENRES = new GENRES();
            gENRES.ID = id;
            gENRES.TITLE = tITLE;
            return gENRES;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TITLE
        {
            get
            {
                return _TITLE;
            }
            set
            {
                OnTITLEChanging(value);
                ReportPropertyChanging("TITLE");
                _TITLE = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TITLE");
                OnTITLEChanged();
            }
        }
        private global::System.String _TITLE;
        partial void OnTITLEChanging(global::System.String value);
        partial void OnTITLEChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_GENRES_GENRES", "MOVIES_GENRES")]
        public EntityCollection<MOVIES_GENRES> MOVIES_GENRES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MOVIES_GENRES>("MOVIEADVISORModel.FK_MOVIES_GENRES_GENRES", "MOVIES_GENRES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MOVIES_GENRES>("MOVIEADVISORModel.FK_MOVIES_GENRES_GENRES", "MOVIES_GENRES", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="MOVIES")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MOVIES : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта MOVIES.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="tITLE">Исходное значение свойства TITLE.</param>
        public static MOVIES CreateMOVIES(global::System.Int32 id, global::System.String tITLE)
        {
            MOVIES mOVIES = new MOVIES();
            mOVIES.ID = id;
            mOVIES.TITLE = tITLE;
            return mOVIES;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TITLE
        {
            get
            {
                return _TITLE;
            }
            set
            {
                OnTITLEChanging(value);
                ReportPropertyChanging("TITLE");
                _TITLE = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TITLE");
                OnTITLEChanged();
            }
        }
        private global::System.String _TITLE;
        partial void OnTITLEChanging(global::System.String value);
        partial void OnTITLEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DESCRIPTION
        {
            get
            {
                return _DESCRIPTION;
            }
            set
            {
                OnDESCRIPTIONChanging(value);
                ReportPropertyChanging("DESCRIPTION");
                _DESCRIPTION = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DESCRIPTION");
                OnDESCRIPTIONChanged();
            }
        }
        private global::System.String _DESCRIPTION;
        partial void OnDESCRIPTIONChanging(global::System.String value);
        partial void OnDESCRIPTIONChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> YEAR
        {
            get
            {
                return _YEAR;
            }
            set
            {
                OnYEARChanging(value);
                ReportPropertyChanging("YEAR");
                _YEAR = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("YEAR");
                OnYEARChanged();
            }
        }
        private Nullable<global::System.Int32> _YEAR;
        partial void OnYEARChanging(Nullable<global::System.Int32> value);
        partial void OnYEARChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_COMMENTS_MOVIES", "MOVIES_COMMENTS")]
        public EntityCollection<MOVIES_COMMENTS> MOVIES_COMMENTS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MOVIES_COMMENTS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES", "MOVIES_COMMENTS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MOVIES_COMMENTS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES", "MOVIES_COMMENTS", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_PERSONS_ROLES_MOVIES", "MOVIES_PERSONS_ROLES")]
        public EntityCollection<MOVIES_PERSONS_ROLES> MOVIES_PERSONS_ROLES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MOVIES_PERSONS_ROLES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_MOVIES", "MOVIES_PERSONS_ROLES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MOVIES_PERSONS_ROLES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_MOVIES", "MOVIES_PERSONS_ROLES", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PICTURES_MOVIES_MOVIES", "PICTURES_MOVIES")]
        public EntityCollection<PICTURES_MOVIES> PICTURES_MOVIES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PICTURES_MOVIES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_MOVIES", "PICTURES_MOVIES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PICTURES_MOVIES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_MOVIES", "PICTURES_MOVIES", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_GENRES_MOVIES", "MOVIES_GENRES")]
        public EntityCollection<MOVIES_GENRES> MOVIES_GENRES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MOVIES_GENRES>("MOVIEADVISORModel.FK_MOVIES_GENRES_MOVIES", "MOVIES_GENRES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MOVIES_GENRES>("MOVIEADVISORModel.FK_MOVIES_GENRES_MOVIES", "MOVIES_GENRES", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="MOVIES_COMMENTS")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MOVIES_COMMENTS : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта MOVIES_COMMENTS.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="uSER_ID">Исходное значение свойства USER_ID.</param>
        /// <param name="mOVIE_ID">Исходное значение свойства MOVIE_ID.</param>
        public static MOVIES_COMMENTS CreateMOVIES_COMMENTS(global::System.Int32 id, global::System.Int32 uSER_ID, global::System.Int32 mOVIE_ID)
        {
            MOVIES_COMMENTS mOVIES_COMMENTS = new MOVIES_COMMENTS();
            mOVIES_COMMENTS.ID = id;
            mOVIES_COMMENTS.USER_ID = uSER_ID;
            mOVIES_COMMENTS.MOVIE_ID = mOVIE_ID;
            return mOVIES_COMMENTS;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TEXT
        {
            get
            {
                return _TEXT;
            }
            set
            {
                OnTEXTChanging(value);
                ReportPropertyChanging("TEXT");
                _TEXT = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TEXT");
                OnTEXTChanged();
            }
        }
        private global::System.String _TEXT;
        partial void OnTEXTChanging(global::System.String value);
        partial void OnTEXTChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MARK
        {
            get
            {
                return _MARK;
            }
            set
            {
                OnMARKChanging(value);
                ReportPropertyChanging("MARK");
                _MARK = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MARK");
                OnMARKChanged();
            }
        }
        private Nullable<global::System.Int32> _MARK;
        partial void OnMARKChanging(Nullable<global::System.Int32> value);
        partial void OnMARKChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PREV_COMMENT_ID
        {
            get
            {
                return _PREV_COMMENT_ID;
            }
            set
            {
                OnPREV_COMMENT_IDChanging(value);
                ReportPropertyChanging("PREV_COMMENT_ID");
                _PREV_COMMENT_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PREV_COMMENT_ID");
                OnPREV_COMMENT_IDChanged();
            }
        }
        private Nullable<global::System.Int32> _PREV_COMMENT_ID;
        partial void OnPREV_COMMENT_IDChanging(Nullable<global::System.Int32> value);
        partial void OnPREV_COMMENT_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 USER_ID
        {
            get
            {
                return _USER_ID;
            }
            set
            {
                OnUSER_IDChanging(value);
                ReportPropertyChanging("USER_ID");
                _USER_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("USER_ID");
                OnUSER_IDChanged();
            }
        }
        private global::System.Int32 _USER_ID;
        partial void OnUSER_IDChanging(global::System.Int32 value);
        partial void OnUSER_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MOVIE_ID
        {
            get
            {
                return _MOVIE_ID;
            }
            set
            {
                OnMOVIE_IDChanging(value);
                ReportPropertyChanging("MOVIE_ID");
                _MOVIE_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MOVIE_ID");
                OnMOVIE_IDChanged();
            }
        }
        private global::System.Int32 _MOVIE_ID;
        partial void OnMOVIE_IDChanging(global::System.Int32 value);
        partial void OnMOVIE_IDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_COMMENTS_MOVIES", "MOVIES")]
        public MOVIES MOVIES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES", "MOVIES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES", "MOVIES").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MOVIES> MOVIESReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES", "MOVIES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES", "MOVIES", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_COMMENTS_MOVIES_COMMENTS", "MOVIES_COMMENTS1")]
        public EntityCollection<MOVIES_COMMENTS> MOVIES_COMMENTS1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MOVIES_COMMENTS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES_COMMENTS", "MOVIES_COMMENTS1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MOVIES_COMMENTS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES_COMMENTS", "MOVIES_COMMENTS1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_COMMENTS_MOVIES_COMMENTS", "MOVIES_COMMENTS")]
        public MOVIES_COMMENTS MOVIES_COMMENTS2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES_COMMENTS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES_COMMENTS", "MOVIES_COMMENTS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES_COMMENTS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES_COMMENTS", "MOVIES_COMMENTS").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MOVIES_COMMENTS> MOVIES_COMMENTS2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES_COMMENTS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES_COMMENTS", "MOVIES_COMMENTS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MOVIES_COMMENTS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_MOVIES_COMMENTS", "MOVIES_COMMENTS", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_COMMENTS_USERS", "USERS")]
        public USERS USERS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<USERS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_USERS", "USERS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<USERS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_USERS", "USERS").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<USERS> USERSReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<USERS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_USERS", "USERS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<USERS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_USERS", "USERS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="MOVIES_GENRES")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MOVIES_GENRES : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта MOVIES_GENRES.
        /// </summary>
        /// <param name="mOVIE_ID">Исходное значение свойства MOVIE_ID.</param>
        /// <param name="gENRE_ID">Исходное значение свойства GENRE_ID.</param>
        public static MOVIES_GENRES CreateMOVIES_GENRES(global::System.Int32 mOVIE_ID, global::System.Int32 gENRE_ID)
        {
            MOVIES_GENRES mOVIES_GENRES = new MOVIES_GENRES();
            mOVIES_GENRES.MOVIE_ID = mOVIE_ID;
            mOVIES_GENRES.GENRE_ID = gENRE_ID;
            return mOVIES_GENRES;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MOVIE_ID
        {
            get
            {
                return _MOVIE_ID;
            }
            set
            {
                if (_MOVIE_ID != value)
                {
                    OnMOVIE_IDChanging(value);
                    ReportPropertyChanging("MOVIE_ID");
                    _MOVIE_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MOVIE_ID");
                    OnMOVIE_IDChanged();
                }
            }
        }
        private global::System.Int32 _MOVIE_ID;
        partial void OnMOVIE_IDChanging(global::System.Int32 value);
        partial void OnMOVIE_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GENRE_ID
        {
            get
            {
                return _GENRE_ID;
            }
            set
            {
                if (_GENRE_ID != value)
                {
                    OnGENRE_IDChanging(value);
                    ReportPropertyChanging("GENRE_ID");
                    _GENRE_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GENRE_ID");
                    OnGENRE_IDChanged();
                }
            }
        }
        private global::System.Int32 _GENRE_ID;
        partial void OnGENRE_IDChanging(global::System.Int32 value);
        partial void OnGENRE_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String empty
        {
            get
            {
                return _empty;
            }
            set
            {
                OnemptyChanging(value);
                ReportPropertyChanging("empty");
                _empty = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("empty");
                OnemptyChanged();
            }
        }
        private global::System.String _empty;
        partial void OnemptyChanging(global::System.String value);
        partial void OnemptyChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_GENRES_GENRES", "GENRES")]
        public GENRES GENRES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GENRES>("MOVIEADVISORModel.FK_MOVIES_GENRES_GENRES", "GENRES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GENRES>("MOVIEADVISORModel.FK_MOVIES_GENRES_GENRES", "GENRES").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GENRES> GENRESReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GENRES>("MOVIEADVISORModel.FK_MOVIES_GENRES_GENRES", "GENRES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GENRES>("MOVIEADVISORModel.FK_MOVIES_GENRES_GENRES", "GENRES", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_GENRES_MOVIES", "MOVIES")]
        public MOVIES MOVIES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_GENRES_MOVIES", "MOVIES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_GENRES_MOVIES", "MOVIES").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MOVIES> MOVIESReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_GENRES_MOVIES", "MOVIES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_GENRES_MOVIES", "MOVIES", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="MOVIES_PERSONS_ROLES")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MOVIES_PERSONS_ROLES : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта MOVIES_PERSONS_ROLES.
        /// </summary>
        /// <param name="mOVIE_ID">Исходное значение свойства MOVIE_ID.</param>
        /// <param name="pERSON_ID">Исходное значение свойства PERSON_ID.</param>
        /// <param name="rOLE_ID">Исходное значение свойства ROLE_ID.</param>
        public static MOVIES_PERSONS_ROLES CreateMOVIES_PERSONS_ROLES(global::System.Int32 mOVIE_ID, global::System.Int32 pERSON_ID, global::System.Int32 rOLE_ID)
        {
            MOVIES_PERSONS_ROLES mOVIES_PERSONS_ROLES = new MOVIES_PERSONS_ROLES();
            mOVIES_PERSONS_ROLES.MOVIE_ID = mOVIE_ID;
            mOVIES_PERSONS_ROLES.PERSON_ID = pERSON_ID;
            mOVIES_PERSONS_ROLES.ROLE_ID = rOLE_ID;
            return mOVIES_PERSONS_ROLES;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MOVIE_ID
        {
            get
            {
                return _MOVIE_ID;
            }
            set
            {
                if (_MOVIE_ID != value)
                {
                    OnMOVIE_IDChanging(value);
                    ReportPropertyChanging("MOVIE_ID");
                    _MOVIE_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MOVIE_ID");
                    OnMOVIE_IDChanged();
                }
            }
        }
        private global::System.Int32 _MOVIE_ID;
        partial void OnMOVIE_IDChanging(global::System.Int32 value);
        partial void OnMOVIE_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PERSON_ID
        {
            get
            {
                return _PERSON_ID;
            }
            set
            {
                if (_PERSON_ID != value)
                {
                    OnPERSON_IDChanging(value);
                    ReportPropertyChanging("PERSON_ID");
                    _PERSON_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PERSON_ID");
                    OnPERSON_IDChanged();
                }
            }
        }
        private global::System.Int32 _PERSON_ID;
        partial void OnPERSON_IDChanging(global::System.Int32 value);
        partial void OnPERSON_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ROLE_ID
        {
            get
            {
                return _ROLE_ID;
            }
            set
            {
                if (_ROLE_ID != value)
                {
                    OnROLE_IDChanging(value);
                    ReportPropertyChanging("ROLE_ID");
                    _ROLE_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ROLE_ID");
                    OnROLE_IDChanged();
                }
            }
        }
        private global::System.Int32 _ROLE_ID;
        partial void OnROLE_IDChanging(global::System.Int32 value);
        partial void OnROLE_IDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_PERSONS_ROLES_MOVIES", "MOVIES")]
        public MOVIES MOVIES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_MOVIES", "MOVIES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_MOVIES", "MOVIES").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MOVIES> MOVIESReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_MOVIES", "MOVIES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MOVIES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_MOVIES", "MOVIES", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_PERSONS_ROLES_PERSONS", "PERSONS")]
        public PERSONS PERSONS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_PERSONS", "PERSONS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_PERSONS", "PERSONS").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PERSONS> PERSONSReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_PERSONS", "PERSONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PERSONS>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_PERSONS", "PERSONS", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_PERSONS_ROLES_ROLES", "ROLES")]
        public ROLES ROLES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ROLES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_ROLES", "ROLES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ROLES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_ROLES", "ROLES").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ROLES> ROLESReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ROLES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_ROLES", "ROLES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ROLES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_ROLES", "ROLES", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="PERSONS")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PERSONS : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PERSONS.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="nAME">Исходное значение свойства NAME.</param>
        public static PERSONS CreatePERSONS(global::System.Int32 id, global::System.String nAME)
        {
            PERSONS pERSONS = new PERSONS();
            pERSONS.ID = id;
            pERSONS.NAME = nAME;
            return pERSONS;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                OnNAMEChanging(value);
                ReportPropertyChanging("NAME");
                _NAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NAME");
                OnNAMEChanged();
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DESCRIPTION
        {
            get
            {
                return _DESCRIPTION;
            }
            set
            {
                OnDESCRIPTIONChanging(value);
                ReportPropertyChanging("DESCRIPTION");
                _DESCRIPTION = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DESCRIPTION");
                OnDESCRIPTIONChanged();
            }
        }
        private global::System.String _DESCRIPTION;
        partial void OnDESCRIPTIONChanging(global::System.String value);
        partial void OnDESCRIPTIONChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_PERSONS_ROLES_PERSONS", "MOVIES_PERSONS_ROLES")]
        public EntityCollection<MOVIES_PERSONS_ROLES> MOVIES_PERSONS_ROLES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MOVIES_PERSONS_ROLES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_PERSONS", "MOVIES_PERSONS_ROLES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MOVIES_PERSONS_ROLES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_PERSONS", "MOVIES_PERSONS_ROLES", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PERSONS_COMMENTS_PERSONS", "PERSONS_COMMENTS")]
        public EntityCollection<PERSONS_COMMENTS> PERSONS_COMMENTS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PERSONS_COMMENTS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS", "PERSONS_COMMENTS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PERSONS_COMMENTS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS", "PERSONS_COMMENTS", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PICTURES_PERSONS_PERSONS", "PICTURES_PERSONS")]
        public EntityCollection<PICTURES_PERSONS> PICTURES_PERSONS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PICTURES_PERSONS>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PERSONS", "PICTURES_PERSONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PICTURES_PERSONS>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PERSONS", "PICTURES_PERSONS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="PERSONS_COMMENTS")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PERSONS_COMMENTS : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PERSONS_COMMENTS.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="uSER_ID">Исходное значение свойства USER_ID.</param>
        /// <param name="pERSON_ID">Исходное значение свойства PERSON_ID.</param>
        public static PERSONS_COMMENTS CreatePERSONS_COMMENTS(global::System.Int32 id, global::System.Int32 uSER_ID, global::System.Int32 pERSON_ID)
        {
            PERSONS_COMMENTS pERSONS_COMMENTS = new PERSONS_COMMENTS();
            pERSONS_COMMENTS.ID = id;
            pERSONS_COMMENTS.USER_ID = uSER_ID;
            pERSONS_COMMENTS.PERSON_ID = pERSON_ID;
            return pERSONS_COMMENTS;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TEXT
        {
            get
            {
                return _TEXT;
            }
            set
            {
                OnTEXTChanging(value);
                ReportPropertyChanging("TEXT");
                _TEXT = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TEXT");
                OnTEXTChanged();
            }
        }
        private global::System.String _TEXT;
        partial void OnTEXTChanging(global::System.String value);
        partial void OnTEXTChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MARK
        {
            get
            {
                return _MARK;
            }
            set
            {
                OnMARKChanging(value);
                ReportPropertyChanging("MARK");
                _MARK = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MARK");
                OnMARKChanged();
            }
        }
        private Nullable<global::System.Int32> _MARK;
        partial void OnMARKChanging(Nullable<global::System.Int32> value);
        partial void OnMARKChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PREV_COMMENT_ID
        {
            get
            {
                return _PREV_COMMENT_ID;
            }
            set
            {
                OnPREV_COMMENT_IDChanging(value);
                ReportPropertyChanging("PREV_COMMENT_ID");
                _PREV_COMMENT_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PREV_COMMENT_ID");
                OnPREV_COMMENT_IDChanged();
            }
        }
        private Nullable<global::System.Int32> _PREV_COMMENT_ID;
        partial void OnPREV_COMMENT_IDChanging(Nullable<global::System.Int32> value);
        partial void OnPREV_COMMENT_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 USER_ID
        {
            get
            {
                return _USER_ID;
            }
            set
            {
                OnUSER_IDChanging(value);
                ReportPropertyChanging("USER_ID");
                _USER_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("USER_ID");
                OnUSER_IDChanged();
            }
        }
        private global::System.Int32 _USER_ID;
        partial void OnUSER_IDChanging(global::System.Int32 value);
        partial void OnUSER_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PERSON_ID
        {
            get
            {
                return _PERSON_ID;
            }
            set
            {
                OnPERSON_IDChanging(value);
                ReportPropertyChanging("PERSON_ID");
                _PERSON_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PERSON_ID");
                OnPERSON_IDChanged();
            }
        }
        private global::System.Int32 _PERSON_ID;
        partial void OnPERSON_IDChanging(global::System.Int32 value);
        partial void OnPERSON_IDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PERSONS_COMMENTS_PERSONS", "PERSONS")]
        public PERSONS PERSONS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS", "PERSONS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS", "PERSONS").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PERSONS> PERSONSReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS", "PERSONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PERSONS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS", "PERSONS", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PERSONS_COMMENTS_PERSONS_COMMENTS", "PERSONS_COMMENTS1")]
        public EntityCollection<PERSONS_COMMENTS> PERSONS_COMMENTS1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PERSONS_COMMENTS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS_COMMENTS", "PERSONS_COMMENTS1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PERSONS_COMMENTS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS_COMMENTS", "PERSONS_COMMENTS1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PERSONS_COMMENTS_PERSONS_COMMENTS", "PERSONS_COMMENTS")]
        public PERSONS_COMMENTS PERSONS_COMMENTS2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS_COMMENTS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS_COMMENTS", "PERSONS_COMMENTS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS_COMMENTS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS_COMMENTS", "PERSONS_COMMENTS").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PERSONS_COMMENTS> PERSONS_COMMENTS2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS_COMMENTS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS_COMMENTS", "PERSONS_COMMENTS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PERSONS_COMMENTS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_PERSONS_COMMENTS", "PERSONS_COMMENTS", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PERSONS_COMMENTS_USERS", "USERS")]
        public USERS USERS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<USERS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_USERS", "USERS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<USERS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_USERS", "USERS").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<USERS> USERSReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<USERS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_USERS", "USERS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<USERS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_USERS", "USERS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="PICTURES")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PICTURES : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PICTURES.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="tITLE">Исходное значение свойства TITLE.</param>
        /// <param name="pATH">Исходное значение свойства PATH.</param>
        public static PICTURES CreatePICTURES(global::System.Int32 id, global::System.String tITLE, global::System.String pATH)
        {
            PICTURES pICTURES = new PICTURES();
            pICTURES.ID = id;
            pICTURES.TITLE = tITLE;
            pICTURES.PATH = pATH;
            return pICTURES;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TITLE
        {
            get
            {
                return _TITLE;
            }
            set
            {
                OnTITLEChanging(value);
                ReportPropertyChanging("TITLE");
                _TITLE = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TITLE");
                OnTITLEChanged();
            }
        }
        private global::System.String _TITLE;
        partial void OnTITLEChanging(global::System.String value);
        partial void OnTITLEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PATH
        {
            get
            {
                return _PATH;
            }
            set
            {
                OnPATHChanging(value);
                ReportPropertyChanging("PATH");
                _PATH = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PATH");
                OnPATHChanged();
            }
        }
        private global::System.String _PATH;
        partial void OnPATHChanging(global::System.String value);
        partial void OnPATHChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PICTURES_MOVIES_PICTURES", "PICTURES_MOVIES")]
        public EntityCollection<PICTURES_MOVIES> PICTURES_MOVIES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PICTURES_MOVIES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_PICTURES", "PICTURES_MOVIES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PICTURES_MOVIES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_PICTURES", "PICTURES_MOVIES", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PICTURES_PERSONS_PICTURES", "PICTURES_PERSONS")]
        public EntityCollection<PICTURES_PERSONS> PICTURES_PERSONS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PICTURES_PERSONS>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PICTURES", "PICTURES_PERSONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PICTURES_PERSONS>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PICTURES", "PICTURES_PERSONS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="PICTURES_MOVIES")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PICTURES_MOVIES : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PICTURES_MOVIES.
        /// </summary>
        /// <param name="mOVIE_ID">Исходное значение свойства MOVIE_ID.</param>
        /// <param name="pICTURES_ID">Исходное значение свойства PICTURES_ID.</param>
        /// <param name="iS_POSTER">Исходное значение свойства IS_POSTER.</param>
        public static PICTURES_MOVIES CreatePICTURES_MOVIES(global::System.Int32 mOVIE_ID, global::System.Int32 pICTURES_ID, global::System.Boolean iS_POSTER)
        {
            PICTURES_MOVIES pICTURES_MOVIES = new PICTURES_MOVIES();
            pICTURES_MOVIES.MOVIE_ID = mOVIE_ID;
            pICTURES_MOVIES.PICTURES_ID = pICTURES_ID;
            pICTURES_MOVIES.IS_POSTER = iS_POSTER;
            return pICTURES_MOVIES;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MOVIE_ID
        {
            get
            {
                return _MOVIE_ID;
            }
            set
            {
                if (_MOVIE_ID != value)
                {
                    OnMOVIE_IDChanging(value);
                    ReportPropertyChanging("MOVIE_ID");
                    _MOVIE_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MOVIE_ID");
                    OnMOVIE_IDChanged();
                }
            }
        }
        private global::System.Int32 _MOVIE_ID;
        partial void OnMOVIE_IDChanging(global::System.Int32 value);
        partial void OnMOVIE_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PICTURES_ID
        {
            get
            {
                return _PICTURES_ID;
            }
            set
            {
                if (_PICTURES_ID != value)
                {
                    OnPICTURES_IDChanging(value);
                    ReportPropertyChanging("PICTURES_ID");
                    _PICTURES_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PICTURES_ID");
                    OnPICTURES_IDChanged();
                }
            }
        }
        private global::System.Int32 _PICTURES_ID;
        partial void OnPICTURES_IDChanging(global::System.Int32 value);
        partial void OnPICTURES_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IS_POSTER
        {
            get
            {
                return _IS_POSTER;
            }
            set
            {
                OnIS_POSTERChanging(value);
                ReportPropertyChanging("IS_POSTER");
                _IS_POSTER = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IS_POSTER");
                OnIS_POSTERChanged();
            }
        }
        private global::System.Boolean _IS_POSTER;
        partial void OnIS_POSTERChanging(global::System.Boolean value);
        partial void OnIS_POSTERChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PICTURES_MOVIES_MOVIES", "MOVIES")]
        public MOVIES MOVIES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_MOVIES", "MOVIES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_MOVIES", "MOVIES").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MOVIES> MOVIESReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MOVIES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_MOVIES", "MOVIES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MOVIES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_MOVIES", "MOVIES", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PICTURES_MOVIES_PICTURES", "PICTURES")]
        public PICTURES PICTURES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PICTURES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_PICTURES", "PICTURES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PICTURES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_PICTURES", "PICTURES").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PICTURES> PICTURESReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PICTURES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_PICTURES", "PICTURES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PICTURES>("MOVIEADVISORModel.FK_PICTURES_MOVIES_PICTURES", "PICTURES", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="PICTURES_PERSONS")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PICTURES_PERSONS : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PICTURES_PERSONS.
        /// </summary>
        /// <param name="pERSON_ID">Исходное значение свойства PERSON_ID.</param>
        /// <param name="pICTURE_ID">Исходное значение свойства PICTURE_ID.</param>
        /// <param name="iS_POSTER">Исходное значение свойства IS_POSTER.</param>
        public static PICTURES_PERSONS CreatePICTURES_PERSONS(global::System.Int32 pERSON_ID, global::System.Int32 pICTURE_ID, global::System.Boolean iS_POSTER)
        {
            PICTURES_PERSONS pICTURES_PERSONS = new PICTURES_PERSONS();
            pICTURES_PERSONS.PERSON_ID = pERSON_ID;
            pICTURES_PERSONS.PICTURE_ID = pICTURE_ID;
            pICTURES_PERSONS.IS_POSTER = iS_POSTER;
            return pICTURES_PERSONS;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PERSON_ID
        {
            get
            {
                return _PERSON_ID;
            }
            set
            {
                if (_PERSON_ID != value)
                {
                    OnPERSON_IDChanging(value);
                    ReportPropertyChanging("PERSON_ID");
                    _PERSON_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PERSON_ID");
                    OnPERSON_IDChanged();
                }
            }
        }
        private global::System.Int32 _PERSON_ID;
        partial void OnPERSON_IDChanging(global::System.Int32 value);
        partial void OnPERSON_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PICTURE_ID
        {
            get
            {
                return _PICTURE_ID;
            }
            set
            {
                if (_PICTURE_ID != value)
                {
                    OnPICTURE_IDChanging(value);
                    ReportPropertyChanging("PICTURE_ID");
                    _PICTURE_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PICTURE_ID");
                    OnPICTURE_IDChanged();
                }
            }
        }
        private global::System.Int32 _PICTURE_ID;
        partial void OnPICTURE_IDChanging(global::System.Int32 value);
        partial void OnPICTURE_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IS_POSTER
        {
            get
            {
                return _IS_POSTER;
            }
            set
            {
                OnIS_POSTERChanging(value);
                ReportPropertyChanging("IS_POSTER");
                _IS_POSTER = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IS_POSTER");
                OnIS_POSTERChanged();
            }
        }
        private global::System.Boolean _IS_POSTER;
        partial void OnIS_POSTERChanging(global::System.Boolean value);
        partial void OnIS_POSTERChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PICTURES_PERSONS_PERSONS", "PERSONS")]
        public PERSONS PERSONS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PERSONS", "PERSONS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PERSONS", "PERSONS").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PERSONS> PERSONSReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PERSONS>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PERSONS", "PERSONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PERSONS>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PERSONS", "PERSONS", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PICTURES_PERSONS_PICTURES", "PICTURES")]
        public PICTURES PICTURES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PICTURES>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PICTURES", "PICTURES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PICTURES>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PICTURES", "PICTURES").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PICTURES> PICTURESReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PICTURES>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PICTURES", "PICTURES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PICTURES>("MOVIEADVISORModel.FK_PICTURES_PERSONS_PICTURES", "PICTURES", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="ROLES")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ROLES : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ROLES.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="tITLE">Исходное значение свойства TITLE.</param>
        public static ROLES CreateROLES(global::System.Int32 id, global::System.String tITLE)
        {
            ROLES rOLES = new ROLES();
            rOLES.ID = id;
            rOLES.TITLE = tITLE;
            return rOLES;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TITLE
        {
            get
            {
                return _TITLE;
            }
            set
            {
                OnTITLEChanging(value);
                ReportPropertyChanging("TITLE");
                _TITLE = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TITLE");
                OnTITLEChanged();
            }
        }
        private global::System.String _TITLE;
        partial void OnTITLEChanging(global::System.String value);
        partial void OnTITLEChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_PERSONS_ROLES_ROLES", "MOVIES_PERSONS_ROLES")]
        public EntityCollection<MOVIES_PERSONS_ROLES> MOVIES_PERSONS_ROLES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MOVIES_PERSONS_ROLES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_ROLES", "MOVIES_PERSONS_ROLES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MOVIES_PERSONS_ROLES>("MOVIEADVISORModel.FK_MOVIES_PERSONS_ROLES_ROLES", "MOVIES_PERSONS_ROLES", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MOVIEADVISORModel", Name="USERS")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class USERS : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта USERS.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="uSERNAME">Исходное значение свойства USERNAME.</param>
        /// <param name="pASSWORD">Исходное значение свойства PASSWORD.</param>
        /// <param name="rOLES">Исходное значение свойства ROLES.</param>
        public static USERS CreateUSERS(global::System.Int32 id, global::System.String uSERNAME, global::System.String pASSWORD, global::System.String rOLES)
        {
            USERS uSERS = new USERS();
            uSERS.ID = id;
            uSERS.USERNAME = uSERNAME;
            uSERS.PASSWORD = pASSWORD;
            uSERS.ROLES = rOLES;
            return uSERS;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String USERNAME
        {
            get
            {
                return _USERNAME;
            }
            set
            {
                OnUSERNAMEChanging(value);
                ReportPropertyChanging("USERNAME");
                _USERNAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("USERNAME");
                OnUSERNAMEChanged();
            }
        }
        private global::System.String _USERNAME;
        partial void OnUSERNAMEChanging(global::System.String value);
        partial void OnUSERNAMEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PASSWORD
        {
            get
            {
                return _PASSWORD;
            }
            set
            {
                OnPASSWORDChanging(value);
                ReportPropertyChanging("PASSWORD");
                _PASSWORD = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PASSWORD");
                OnPASSWORDChanged();
            }
        }
        private global::System.String _PASSWORD;
        partial void OnPASSWORDChanging(global::System.String value);
        partial void OnPASSWORDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ROLES
        {
            get
            {
                return _ROLES;
            }
            set
            {
                OnROLESChanging(value);
                ReportPropertyChanging("ROLES");
                _ROLES = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ROLES");
                OnROLESChanged();
            }
        }
        private global::System.String _ROLES;
        partial void OnROLESChanging(global::System.String value);
        partial void OnROLESChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EMAIL
        {
            get
            {
                return _EMAIL;
            }
            set
            {
                OnEMAILChanging(value);
                ReportPropertyChanging("EMAIL");
                _EMAIL = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EMAIL");
                OnEMAILChanged();
            }
        }
        private global::System.String _EMAIL;
        partial void OnEMAILChanging(global::System.String value);
        partial void OnEMAILChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_MOVIES_COMMENTS_USERS", "MOVIES_COMMENTS")]
        public EntityCollection<MOVIES_COMMENTS> MOVIES_COMMENTS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MOVIES_COMMENTS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_USERS", "MOVIES_COMMENTS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MOVIES_COMMENTS>("MOVIEADVISORModel.FK_MOVIES_COMMENTS_USERS", "MOVIES_COMMENTS", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MOVIEADVISORModel", "FK_PERSONS_COMMENTS_USERS", "PERSONS_COMMENTS")]
        public EntityCollection<PERSONS_COMMENTS> PERSONS_COMMENTS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PERSONS_COMMENTS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_USERS", "PERSONS_COMMENTS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PERSONS_COMMENTS>("MOVIEADVISORModel.FK_PERSONS_COMMENTS_USERS", "PERSONS_COMMENTS", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
